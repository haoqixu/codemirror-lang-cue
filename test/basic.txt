# empty
==>
SourceFile()

# empty struct
{}
==>
SourceFile(Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(StructLit("{","}"))))))))

# null
null
==>
SourceFile(Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(BasicLit(NullLit(null)))))))))

# top
_
==>
SourceFile(Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(BasicLit(Top))))))))

# bottom
_|_
==>
SourceFile(Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(BasicLit(BottomLit))))))))

# true
true
==>
SourceFile(Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(BasicLit(BoolLit(true)))))))))

# false
false
==>
SourceFile(Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(BasicLit(BoolLit(false)))))))))

# empty list
[]
==>
SourceFile(Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(ListLit("[","]"))))))))

# file attribute
@protobuf(proto3)
==>
SourceFile(Attribute(Identifier,"(",AttrTokens,")"))

# empty attribute
@tag()
==>
SourceFile(Attribute(Identifier,"(",AttrTokens,")"))

# atrributes in struct
{
    @tag()
}
{
    @tag(id="some_id")
}
{@tag(id="some_id")
}
{
    @tag(1)
    @tag(2)
}
==>
SourceFile(
    Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(StructLit("{",
        Declaration(Attribute(Identifier,"(",AttrTokens,")")),"}"))))))),
    Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(StructLit("{",
        Declaration(Attribute(Identifier,"(",AttrTokens,")")),"}"))))))),
    Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(StructLit("{",
        Declaration(Attribute(Identifier,"(",AttrTokens,")")),"}"))))))),
    Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(Literal(StructLit("{",
        Declaration(Attribute(Identifier,"(",AttrTokens,")")),
        Declaration(Attribute(Identifier,"(",AttrTokens,")")),"}"))))))))

# new lines at the beginning

a: str
==>
SourceFile(Declaration(Field(Label(LabelExpr(LabelName(Identifier))),AliasExpr(Expression(PrimaryExpr(OperandName(Identifier)))))))

# Comments
// Docs
a: string // a is string
// comments
==>
SourceFile(Comment,
    Declaration(Field(Label(LabelExpr(LabelName(Identifier))),AliasExpr(Expression(PrimaryExpr(OperandName(Identifier)))))),Comment,Comment)

# Selectors
A.a
a: A.a
a: A.b.c
==>
SourceFile(
Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(PrimaryExpr(OperandName(Identifier)),Selector(Identifier)))))),
Declaration(Field(Label(LabelExpr(LabelName(Identifier))),AliasExpr(Expression(PrimaryExpr(PrimaryExpr(OperandName(Identifier)),Selector(Identifier))))))
Declaration(Field(Label(LabelExpr(LabelName(Identifier))),AliasExpr(Expression(PrimaryExpr(PrimaryExpr(PrimaryExpr(OperandName(Identifier)),Selector(Identifier)),Selector(Identifier)))))))

# Index
A["1"]
B[1+2]
B[B[1]]
==>
SourceFile(
    Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(PrimaryExpr(OperandName(Identifier)),Index("[",Expression(PrimaryExpr(Literal(BasicLit(StringLit(SimpleStringLit))))),"]")))))),
    Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(PrimaryExpr(OperandName(Identifier)),Index("[",Expression(BinExpr(Expression(PrimaryExpr(Literal(BasicLit(IntLit(DecimalLit))))),Expression(PrimaryExpr(Literal(BasicLit(IntLit(DecimalLit))))))),"]")))))),
    Declaration(Embedding(AliasExpr(Expression(PrimaryExpr(PrimaryExpr(OperandName(Identifier)),Index("[",Expression(PrimaryExpr(PrimaryExpr(OperandName(Identifier)),Index("[",Expression(PrimaryExpr(Literal(BasicLit(IntLit(DecimalLit))))),"]"))),"]")))))))
